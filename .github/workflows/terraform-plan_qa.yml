name: "Terraform Plan Develop - QA"

on:
  pull_request:
    branches:
      - develop

env:
  TF_CLOUD_ORGANIZATION: "lblasnar"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "aws-lambda-lab-gh-actions"
  CONFIG_DIRECTORY: "./deploy"

jobs:
  terraform:
    if: github.repository != 'hashicorp-education/learn-terraform-github-actions'
    name: "Terraform Plan QA"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=lblasnar_awslamda
      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true
      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true
        env:
          #  https://github.com/hashicorp/tfc-workflows-github/issues/10
          TF_VAR_environment: "\"QA\""
          TF_VAR_sqs_name: "\"SQS_QA\""
          TF_VAR_sqs_delay: 90
          TF_VAR_sqs_max_message_size: 2048
          TF_VAR_sqs_message_retention_seconds: 86400
          TF_VAR_sqs_receive_wait_time_seconds: 10
          TF_VAR_lambda_runtime: "\"java11\""
          TF_VAR_lambda_handler: "\"org.example.lambda.HandlerStream\""
          TF_VAR_lambda_function_name: "\"Lab_lambda_function_QA\""
          TF_VAR_lambda_filename: "\"LambdaTest-1.0-SNAPSHOT.jar\""
          TF_VAR_lambda_memory_size: 1024
          TF_VAR_lambda_timeout: 20
          TF_VAR_lambda_publish: true
          TF_VAR_lambda_alias_name: "\"QA\""
          TF_VAR_lambda_alias_description: "\"QA Environment\""
          TF_VAR_lambda_alias_version: 9
          TF_VAR_lambda_event_source_mapping_enabled: true
          TF_VAR_lambda_allow_invocation_from_sns_statement_id: "\"AllowExecutionFromSNSPR\""
          TF_VAR_lambda_allow_invocation_from_sns_action: "\"lambda:*\""
          TF_VAR_lambda_allow_invocation_from_sns_principal: "\"sns.amazonaws.com\""
          TF_VAR_lambda_role_name: "\"LambdaRole_QA\""
          TF_VAR_sns_protocol: "\"lambda\""
          TF_VAR_sns_name: "\"SNS_QA\""

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      - name: Update PR
        uses: actions/github-script@v6
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });
            const output = `#### Terraform Cloud Plan Output
               \`\`\`
               Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
               \`\`\`
               [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
               `;
            // 3. Delete previous comment so PR timeline makes sense
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

